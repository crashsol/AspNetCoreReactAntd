/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.16.0 (NJsonSchema v9.13.25.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class AbpClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    apiDefinition(): Promise<ApplicationApiDescriptionModel> {
        let url_ = this.baseUrl + "/api/abp/api-definition";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processApiDefinition(_response);
        });
    }

    protected processApiDefinition(response: Response): Promise<ApplicationApiDescriptionModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ApplicationApiDescriptionModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApplicationApiDescriptionModel>(<any>null);
    }

    /**
     * @return Success
     */
    applicationConfiguration(): Promise<ApplicationConfigurationDto> {
        let url_ = this.baseUrl + "/api/abp/application-configuration";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processApplicationConfiguration(_response);
        });
    }

    protected processApplicationConfiguration(response: Response): Promise<ApplicationConfigurationDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ApplicationConfigurationDto>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApplicationConfigurationDto>(<any>null);
    }
}

export class AbpClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    applicationConfigurationScript(): Promise<string> {
        let url_ = this.baseUrl + "/Abp/ApplicationConfigurationScript";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/javascript"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processApplicationConfigurationScript(_response);
        });
    }

    protected processApplicationConfigurationScript(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <string>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * @param type (optional) 
     * @param modules (optional) 
     * @param controllers (optional) 
     * @param actions (optional) 
     * @return Success
     */
    serviceProxyScript(type: string | null | undefined, useCache: boolean, modules: string | null | undefined, controllers: string | null | undefined, actions: string | null | undefined): Promise<string> {
        let url_ = this.baseUrl + "/Abp/ServiceProxyScript?";
        if (type !== undefined)
            url_ += "Type=" + encodeURIComponent("" + type) + "&"; 
        if (useCache === undefined || useCache === null)
            throw new Error("The parameter 'useCache' must be defined and cannot be null.");
        else
            url_ += "UseCache=" + encodeURIComponent("" + useCache) + "&"; 
        if (modules !== undefined)
            url_ += "Modules=" + encodeURIComponent("" + modules) + "&"; 
        if (controllers !== undefined)
            url_ += "Controllers=" + encodeURIComponent("" + controllers) + "&"; 
        if (actions !== undefined)
            url_ += "Actions=" + encodeURIComponent("" + actions) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/javascript"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processServiceProxyScript(_response);
        });
    }

    protected processServiceProxyScript(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <string>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }
}

export class LanguagesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param culture (optional) 
     * @param uiCulture (optional) 
     * @param returnUrl (optional) 
     * @return Success
     */
    switch(culture: string | null | undefined, uiCulture: string | null | undefined, returnUrl: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Abp/Languages/Switch?";
        if (culture !== undefined)
            url_ += "culture=" + encodeURIComponent("" + culture) + "&"; 
        if (uiCulture !== undefined)
            url_ += "uiCulture=" + encodeURIComponent("" + uiCulture) + "&"; 
        if (returnUrl !== undefined)
            url_ += "returnUrl=" + encodeURIComponent("" + returnUrl) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSwitch(_response);
        });
    }

    protected processSwitch(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class AppClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    bookGet(id: string): Promise<BookDto> {
        let url_ = this.baseUrl + "/api/app/book/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBookGet(_response);
        });
    }

    protected processBookGet(response: Response): Promise<BookDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <BookDto>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BookDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    bookPut(id: string, input: CreateUpdateBookDto | null | undefined): Promise<BookDto> {
        let url_ = this.baseUrl + "/api/app/book/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBookPut(_response);
        });
    }

    protected processBookPut(response: Response): Promise<BookDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <BookDto>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BookDto>(<any>null);
    }

    /**
     * @return Success
     */
    bookDelete(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/app/book/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBookDelete(_response);
        });
    }

    protected processBookDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param sorting (optional) 
     * @return Success
     */
    bookGet(sorting: string | null | undefined, skipCount: number, maxResultCount: number): Promise<PagedResultDtoOfBookDto> {
        let url_ = this.baseUrl + "/api/app/book?";
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (skipCount === undefined || skipCount === null)
            throw new Error("The parameter 'skipCount' must be defined and cannot be null.");
        else
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        if (maxResultCount === undefined || maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' must be defined and cannot be null.");
        else
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBookGet(_response);
        });
    }

    protected processBookGet(response: Response): Promise<PagedResultDtoOfBookDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <PagedResultDtoOfBookDto>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PagedResultDtoOfBookDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    bookPost(input: CreateUpdateBookDto | null | undefined): Promise<BookDto> {
        let url_ = this.baseUrl + "/api/app/book";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBookPost(_response);
        });
    }

    protected processBookPost(response: Response): Promise<BookDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <BookDto>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BookDto>(<any>null);
    }
}

export interface ApplicationApiDescriptionModel {
    modules: { [key: string] : ModuleApiDescriptionModel; } | undefined;
}

export interface ModuleApiDescriptionModel {
    rootPath: string | undefined;
    controllers: { [key: string] : ControllerApiDescriptionModel; } | undefined;
}

export interface ControllerApiDescriptionModel {
    controllerName: string | undefined;
    typeAsString: string | undefined;
    interfaces: ControllerInterfaceApiDescriptionModel[] | undefined;
    actions: { [key: string] : ActionApiDescriptionModel; } | undefined;
}

export interface ControllerInterfaceApiDescriptionModel {
    typeAsString: string | undefined;
}

export interface ActionApiDescriptionModel {
    uniqueName: string | undefined;
    name: string | undefined;
    httpMethod: string | undefined;
    url: string | undefined;
    supportedVersions: string[] | undefined;
    parametersOnMethod: MethodParameterApiDescriptionModel[] | undefined;
    parameters: ParameterApiDescriptionModel[] | undefined;
    returnValue: ReturnValueApiDescriptionModel | undefined;
}

export interface MethodParameterApiDescriptionModel {
    name: string | undefined;
    typeAsString: string | undefined;
    isOptional: boolean | undefined;
    defaultValue: any | undefined;
}

export interface ParameterApiDescriptionModel {
    nameOnMethod: string | undefined;
    name: string | undefined;
    typeAsString: string | undefined;
    isOptional: boolean | undefined;
    defaultValue: any | undefined;
    constraintTypes: string[] | undefined;
    bindingSourceId: string | undefined;
}

export interface ReturnValueApiDescriptionModel {
    typeAsString: string | undefined;
}

export interface ApplicationConfigurationDto {
    localization: ApplicationLocalizationConfigurationDto | undefined;
    auth: ApplicationAuthConfigurationDto | undefined;
    setting: ApplicationSettingConfigurationDto | undefined;
    currentUser: CurrentUserDto | undefined;
}

export interface ApplicationLocalizationConfigurationDto {
    values: { [key: string] : { [key: string] : string; }; } | undefined;
}

export interface ApplicationAuthConfigurationDto {
    policies: { [key: string] : boolean; } | undefined;
    grantedPolicies: { [key: string] : boolean; } | undefined;
}

export interface ApplicationSettingConfigurationDto {
    values: { [key: string] : string; } | undefined;
}

export interface CurrentUserDto {
    isAuthenticated: boolean | undefined;
    id: string | undefined;
    tenantId: string | undefined;
    userName: string | undefined;
}

export interface BookDto {
    name: string | undefined;
    type: BookDtoType | undefined;
    publishDate: Date | undefined;
    price: number | undefined;
    lastModificationTime: Date | undefined;
    lastModifierId: string | undefined;
    creationTime: Date | undefined;
    creatorId: string | undefined;
    id: string | undefined;
}

export interface CreateUpdateBookDto {
    name: string;
    type: CreateUpdateBookDtoType;
    publishDate: Date;
    price: number;
}

export interface PagedResultDtoOfBookDto {
    totalCount: number | undefined;
    items: BookDto[] | undefined;
}

export enum BookDtoType {
    Undefined = "Undefined", 
    Advanture = "Advanture", 
    Biography = "Biography", 
    Dystopia = "Dystopia", 
    Fantastic = "Fantastic", 
    Horror = "Horror", 
    Science = "Science", 
    ScienceFiction = "ScienceFiction", 
    Poetry = "Poetry", 
}

export enum CreateUpdateBookDtoType {
    Undefined = "Undefined", 
    Advanture = "Advanture", 
    Biography = "Biography", 
    Dystopia = "Dystopia", 
    Fantastic = "Fantastic", 
    Horror = "Horror", 
    Science = "Science", 
    ScienceFiction = "ScienceFiction", 
    Poetry = "Poetry", 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}